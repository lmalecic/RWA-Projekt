@model WebApp.Models.BooksViewModel
@using DAL.Models

@{
    ViewData["Title"] = "Books";
    var currentPage = Model.SearchResult.Page;
    var totalPages = Model.SearchResult.TotalPages;
    var books = Model.SearchResult.Items;
}

@await Html.PartialAsync("_EntityLayout")

<h1>
    Books
    <a class="btn btn-primary" asp-action="Create" asp-controller="Book" method="get">Create new</a>
</h1>

@await Html.PartialAsync("_BookSearchForm")

<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.SearchResult.Items.FirstOrDefault().Id)</th>
            <th>@Html.DisplayNameFor(model => model.SearchResult.Items.FirstOrDefault().Isbn)</th>
            <th>@Html.DisplayNameFor(model => model.SearchResult.Items.FirstOrDefault().Name)</th>
            <th>@Html.DisplayNameFor(model => model.SearchResult.Items.FirstOrDefault().Author)</th>
            <th>@Html.DisplayNameFor(model => model.SearchResult.Items.FirstOrDefault().Description)</th>
            <th>@Html.DisplayNameFor(model => model.Genres.FirstOrDefault().Name)</th>
            <th>Actions</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in books) {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Id)</td>
                <td>@Html.DisplayFor(modelItem => item.Isbn)</td>
                <td>@Html.DisplayFor(modelItem => item.Name)</td>
                <td>@Html.DisplayFor(modelItem => item.Author)</td>
                <td>@Html.DisplayFor(modelItem => item.Description)</td>
                <td>@Html.DisplayFor(modelItem => modelItem.Genres.FirstOrDefault(g => g.Id == item.GenreId).Name)</td>
                <td>
                    <a class="btn btn-outline-primary" asp-action="Details" asp-controller="Book" asp-route-id="@item.Id" asp-route-returnUrl="Admin/Books">Details</a>
                </td>
                <td>
                    <a class="btn btn-secondary" asp-action="Edit" asp-controller="Book" asp-route-id="@item.Id">Edit</a>
                </td>
                <td>
                    <a class="btn btn-danger" asp-action="Delete" asp-controller="Book" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-between align-items-center">
    <div>
        <span>Showing page @currentPage of @totalPages</span>
    </div>
    <div>
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" asp-action="Books" asp-route-page="@(currentPage - 1)">Previous</a>
                </li>
                <li class="page-item @(currentPage == 1 ? "active" : "")">
                    <a class="page-link" asp-action="Books" asp-route-page="1">1</a>
                </li>
                @if (currentPage > 3)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
                @* Previous page number (before current) *@
                @if (currentPage - 1 > 1)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Books" asp-route-page="@(currentPage - 1)">@(currentPage - 1)</a>
                    </li>
                }
                @* Current page (if not first or last) *@
                @if (currentPage != 1 && currentPage != totalPages)
                {
                    <li class="page-item active">
                        <a class="page-link" asp-action="Books" asp-route-page="@currentPage">@currentPage</a>
                    </li>
                }
                @* Next page number (after current) *@
                @if (currentPage + 1 < totalPages)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Books" asp-route-page="@(currentPage + 1)">@(currentPage + 1)</a>
                    </li>
                }
                @if (currentPage < totalPages - 2)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
                @if (totalPages > 1)
                {
                    <li class="page-item @(currentPage == totalPages ? "active" : "")">
                        <a class="page-link" asp-action="Books" asp-route-page="@totalPages">@totalPages</a>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <a class="page-link" asp-action="Books" asp-route-page="@(currentPage + 1)">Next</a>
                </li>
            </ul>
        </nav>
    </div>
</div>

@section Scripts {
    <script>
        document.querySelector('form').addEventListener('submit', function(e) {
            var elements = this.querySelectorAll('input:not([type="submit"]), select');
            elements.forEach(function(el) {
                if (el.value === '' || el.value === null) {
                    el.disabled = true;
                }
            });
        });
    </script>
}
